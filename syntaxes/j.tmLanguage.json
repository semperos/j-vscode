{
  "comment": "Reference to the Oniguruma Regex libraray:\n  https://github.com/kkos/oniguruma/blob/master/doc/RE\n\n* The reference version for this TextMate grammar is the YAML version here:\n  https://github.com/tikkanz/j-vscode/blob/master/syntaxes/j.tmLanguage.yaml\n  Convert to other formats (JSON, PLIST) using utils (e.g. TextMate Languages extension for VS Code)\n* Some in comments throughout the grammar\n",
  "name": "J",
  "scopeName": "source.j",
  "fileTypes": [
    "ijs",
    "ijt"
  ],
  "patterns": [
    {
      "include": "#direct_noun_defn"
    },
    {
      "include": "#direct_defn"
    },
    {
      "include": "#explicit_defn"
    },
    {
      "include": "#modifier_explicit_defn"
    },
    {
      "include": "#explicit_string_defn"
    },
    {
      "include": "#noun_defn"
    },
    {
      "include": "#number"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#copula"
    },
    {
      "include": "#string"
    },
    {
      "include": "#note"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.line.j",
          "match": "\\b(NB\\.).*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.begin.j"
            }
          }
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "comment": "single line string",
          "name": "string.quoted.single.j",
          "match": "(')[^']*(?:''[^']*)*(')",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.j"
            },
            "2": {
              "name": "punctuation.definition.string.end.j"
            }
          }
        }
      ]
    },
    "copula": {
      "patterns": [
        {
          "comment": "assignment operators",
          "name": "copula.global.j",
          "match": "=:"
        },
        {
          "name": "copula.local.j",
          "match": "=\\."
        }
      ]
    },
    "explicit_arg": {
      "patterns": [
        {
          "comment": "argument identifiers within explicit definition blocks",
          "name": "variable.parameter.j",
          "match": "\\b[xy](?![\\w.:])"
        }
      ]
    },
    "explicit_operand": {
      "patterns": [
        {
          "comment": "operand identifiers within modifier explicit definition blocks",
          "name": "variable.parameter.j",
          "match": "\\b[nmuv](?![\\w.:])"
        }
      ]
    },
    "direct_defn": {
      "patterns": [
        {
          "comment": "direct definition of verbs/modifiers",
          "name": "definition.explicit.block.j",
          "begin": "((\\{\\{)(\\)[mdvac])(.*$)|(\\{\\{)(?![.:\\)]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.begin.j"
            }
          },
          "end": "(\\}\\})(?![.:])",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.end.j"
            }
          },
          "patterns": [
            {
              "include": "#direct_noun_defn"
            },
            {
              "include": "#direct_defn"
            },
            {
              "include": "#explicit_arg"
            },
            {
              "include": "#explicit_operand"
            },
            {
              "include": "#number"
            },
            {
              "include": "#operator"
            },
            {
              "include": "#copula"
            },
            {
              "include": "#string"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "direct_noun_defn": {
      "patterns": [
        {
          "comment": "direct definition of nouns",
          "name": "string.noun.j",
          "begin": "(\\{\\{)(\\)n)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.block.begin.j"
            }
          },
          "end": "(^\\}\\})(?![.:])",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.end.j"
            }
          }
        }
      ]
    },
    "explicit_defn": {
      "patterns": [
        {
          "comment": "explicit definition of a verb",
          "name": "definition.explicit.block.j",
          "begin": "\\b([34]|13|verb|monad|dyad)\\s+(:\\s*0|define)\\b",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.begin.j"
            }
          },
          "end": "^\\s*\\)\\s*\\n",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.end.j"
            }
          },
          "patterns": [
            {
              "include": "#direct_noun_defn"
            },
            {
              "include": "#direct_defn"
            },
            {
              "include": "#explicit_arg"
            },
            {
              "include": "#number"
            },
            {
              "include": "#operator"
            },
            {
              "include": "#copula"
            },
            {
              "include": "#string"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "modifier_explicit_defn": {
      "patterns": [
        {
          "comment": "explicit definition of a modifier (adverb/conjunction)",
          "name": "definition.explicit.block.j",
          "begin": "\\b([12]|adverb|conjunction)\\s+(:\\s*0|define)\\b",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.begin.j"
            }
          },
          "end": "^\\s*\\)\\s*\\n",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.end.j"
            }
          },
          "patterns": [
            {
              "include": "#direct_noun_defn"
            },
            {
              "include": "#direct_defn"
            },
            {
              "include": "#explicit_arg"
            },
            {
              "include": "#explicit_operand"
            },
            {
              "include": "#number"
            },
            {
              "include": "#operator"
            },
            {
              "include": "#copula"
            },
            {
              "include": "#string"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "explicit_string_defn": {
      "patterns": [
        {
          "comment": "explicit string definition of verb or modifier",
          "name": "definition.explicit.string.j",
          "match": "\\b(([1-4]|adverb|conjunction|verb|monad|dyad)\\s+(:|def))\\s*((')[^']*(?:''[^']*)*('))",
          "captures": {
            "1": {
              "name": "punctuation.definition.explicit.begin.j"
            },
            "4": {
              "name": "string.quoted.single.j"
            }
          }
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.j",
          "match": "\\b(if|do|else|elseif|for|select|case|fcase)\\.(?![.:])"
        },
        {
          "name": "keyword.control.j",
          "match": "\\b(assert|break|continue|return|while|whilst)\\.(?![.:])"
        },
        {
          "name": "keyword.control.j",
          "match": "\\b(throw|try|catch|catchd|catcht)\\.(?![.:])"
        },
        {
          "name": "keyword.control.j",
          "match": "\\b(for_[A-Za-z][A-Za-z_0-9]*|goto_[A-Za-z][A-Za-z_0-9]*|label_[A-Za-z][A-Za-z_0-9]*)\\.(?![.:])"
        },
        {
          "name": "keyword.control.end.j",
          "match": "\\bend\\.(?![.:])"
        }
      ]
    },
    "note": {
      "patterns": [
        {
          "name": "comment.block.note.j",
          "begin": "^\\s*\\bNote\\b",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.j"
            }
          },
          "end": "^\\s*\\)\\s*\\n",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.j"
            }
          }
        },
        {
          "comment": "dd ",
          "name": "comment.line.note.j",
          "match": "\\bNote\\b(?!\\s*\\=[:.])\\s*[\\'\\d].*$"
        }
      ]
    },
    "noun_defn": {
      "patterns": [
        {
          "comment": "multi-line noun definition",
          "name": "string.noun.j",
          "begin": "\\b(0|noun)\\s+(:\\s*0|define)\\b",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.block.begin.j"
            }
          },
          "end": "^\\s*\\)\\s*\\n",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.explicit.end.j"
            }
          }
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "comment": "classic numbers",
          "name": "constant.numeric.j",
          "match": "\\b(?<!\\.)(_\\.\\d+|_?\\d+\\.?\\d*)(?![.:\\w])"
        },
        {
          "comment": "special numbers (angles, exponent, complex, rational, extended)",
          "name": "constant.numeric.j",
          "match": "\\b(_?\\d+\\.?\\d*)(ar|ad|[ejprx])(_?\\d*\\.?\\w*)(?![.:\\w])"
        },
        {
          "comment": "numbers base",
          "name": "constant.numeric.j",
          "match": "\\b(_?\\d+\\.?\\d*)(b)(_?\\w*\\.?\\w*)(?![.:\\w])"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.other.noun.j",
          "match": "\\b(_\\.|a\\.|a:)(?![.:])"
        },
        {
          "comment": "numbers with inflection and double inflections",
          "name": "keyword.operator.verb.j",
          "match": "((\\b_?[1-9]:)|(\\b0:)|({::))(?![.:])"
        },
        {
          "comment": "letters with inflection",
          "name": "keyword.operator.verb.j",
          "match": "\\b((p\\.\\.)|([AcCeEiIjLopr]\\.)|([ipqsux]:))(?![.:])"
        },
        {
          "comment": "symbols with . inflection",
          "name": "keyword.operator.verb.j",
          "match": "([<>\\+\\*\\-%$|,#{}^~\"?]\\.)(?![.:])"
        },
        {
          "comment": "symbols with : inflection",
          "name": "keyword.operator.verb.j",
          "match": "([<>\\+\\*\\-%$|,#{};~\"_\\/\\\\\\[]:)(?![.:])"
        },
        {
          "comment": "symbols with no inflection",
          "name": "keyword.operator.verb.j",
          "match": "([<>\\+\\*\\-%$|,#{!;^=?\\[\\]])(?![.:])"
        },
        {
          "comment": "letters with inflection",
          "name": "keyword.operator.adverb.j",
          "match": "\\b(([bfMt]\\.)|(t:))(?![.:])"
        },
        {
          "comment": "symbols with and without . inflection",
          "name": "keyword.operator.adverb.j",
          "match": "(([\\/\\\\]\\.)|([~\\/\\\\}]))(?![.:])"
        },
        {
          "comment": "letters with inflection",
          "name": "keyword.operator.conjunction.j",
          "match": "\\b(([dDHT]\\.)|([DLS]:))(?![.:])"
        },
        {
          "comment": "symbols with double inflection, . or : inflection or no inflection",
          "name": "keyword.operator.conjunction.j",
          "match": "((&\\.:)|([&@!;]\\.)|([&@!`^]:)|([&@`\"]))(?![.:])"
        },
        {
          "comment": ". or : with or without inflection (need leading whitespace)",
          "name": "keyword.operator.conjunction.j",
          "match": "(?<=\\s)([.:][.:]|[.:])(?![.:])"
        }
      ]
    }
  },
  "firstLineMatch": "^#!.*\\bjconsole\\s*$",
  "foldingStartMarker": "^\\s*(?:if|while|for|try)\\.(?![.:])(?!.*\\bend\\b).*$",
  "foldingStopMarker": "^\\s*(?:end)\\.(?![.:]).*$"
}